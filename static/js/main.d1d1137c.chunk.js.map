{"version":3,"sources":["monteCarloPi.tsx","App.js","reportWebVitals.js","index.js"],"names":["MonteCarloPI","DIM","useState","matrice","setMatrice","matriceElements","setElements","total","setTotal","inside","setInside","useEffect","tmpMatrice","x","row","y","push","length","console","log","tmpMatriceElements","color","className","style","backgroundColor","Button","variant","onClick","ins","map","i","Math","random","floor","simulate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOA6EeA,EAvEM,WAEjB,IACMC,EAAM,IACZ,EAA8BC,mBAAqB,IAAnD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAuCF,mBAAwB,IAA/D,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA0BJ,oBAAkB,GAA5C,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAA4BN,mBAAiB,GAA7C,mBAAOO,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAEN,IADA,IAAIC,EAAyB,GACpBC,EAAI,EAAGA,EAAIZ,EAAKY,IAAI,CAEzB,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAId,EAAKc,IACrBD,EAAIE,KAAK,GAEbJ,EAAWI,KAAKF,GAEpBV,EAAWQ,GACXJ,EAAS,KACV,IAEHG,qBAAU,WACN,GAAKR,EAAQc,OAAb,CACAC,QAAQC,IAAI,SAEb,IADC,IAAIC,EAAoC,GAChCP,EAAI,EAAGA,EAAIZ,EAAKY,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAId,EAAKc,IAAI,CACxB,IAAIM,EAAgB,GAEpBA,EADIR,EAAEA,EAAIE,EAAEA,EAAK,IACZ,mBAAe,IAAI,GAAGZ,EAAQU,GAAGE,GAAjC,UAGA,cAAU,IAAI,GAAGZ,EAAQU,GAAGE,GAA5B,eAGLK,EAAmBJ,KAAK,qBAAKM,UAAY,eAAeC,MAAS,CAACC,gBAAkBH,GAA5D,gBAGjCf,EAAYc,MACZ,CAACb,IAqBJ,OACA,gCACKE,EAAS,gDAAmBA,EAAOF,EAAQ,KAAS,6BACrD,mDACA,cAACkB,EAAA,EAAD,CAASC,QAAQ,YAAYL,MAAQ,UAAUM,QAAW,kBAvB7C,WAGb,IAFA,IAAIC,EAAMnB,EACNG,EAAyBT,EAAQ0B,KAAI,SAAAhB,GAAC,OAAIA,KACrCiB,EAAI,EAAGA,EA3CF,IA2CSA,IAAI,CACvB,IAAIjB,EAAIkB,KAAKC,SACTjB,EAAIgB,KAAKC,SAERnB,EAAEA,EAAIE,EAAEA,EAAK,IACda,GAAO,GAEXf,EAAIkB,KAAKE,MAAU,IAAJpB,GACfE,EAAIgB,KAAKE,MAAU,IAAJlB,GACfH,EAAWC,GAAGE,GAAKH,EAAWC,GAAGE,GAAK,EAG1CP,EAASD,EAvDK,KAwDdG,EAAUkB,GAOsDM,IAAhE,wBACA,qBAAKZ,UAAY,UAAjB,SAA4BjB,QC7DrB8B,MARf,WACE,OACE,mCACA,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1d1137c.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst MonteCarloPI = () => {\r\n    \r\n    const N: number = 10000\r\n    const DIM = 100\r\n    const [matrice, setMatrice] = useState<number[][]>([])\r\n    const [matriceElements, setElements] = useState<JSX.Element[]>([])\r\n    const [total, setTotal] = useState<number>(-1)\r\n    const [inside, setInside] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        let tmpMatrice: number[][] = []\r\n        for (let x = 0; x < DIM; x++){\r\n            let row = []\r\n            for (let y = 0; y < DIM; y++){\r\n                row.push(0)\r\n            }\r\n            tmpMatrice.push(row)\r\n        }\r\n        setMatrice(tmpMatrice)\r\n        setTotal(0)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!matrice.length) return\r\n        console.log(\"Hallo\")\r\n        let tmpMatriceElements: JSX.Element[] = []\r\n       for (let x = 0; x < DIM; x++){\r\n           for (let y = 0; y < DIM; y++){\r\n                let color: string = \"\"\r\n               if ((x*x + y*y) < 100*100 ){\r\n                color = `rgb(255, ${230-15*matrice[x][y]}, 255)`\r\n               }\r\n               else{\r\n                color = `rgb(${230-15*matrice[x][y]}, 255, 255)`\r\n               }\r\n\r\n                tmpMatriceElements.push(<div className = \"matrice-item\" style = {{backgroundColor : color}}> </div>)\r\n           }\r\n       }\r\n       setElements(tmpMatriceElements)\r\n    }, [total])\r\n\r\n    const simulate = () =>{\r\n        let ins = inside\r\n        let tmpMatrice: number[][] = matrice.map(x => x)\r\n        for (let i = 0; i < N; i++){\r\n            let x = Math.random()\r\n            let y = Math.random()\r\n\r\n            if ((x*x + y*y) < 1){\r\n                ins += 1\r\n            }\r\n            x = Math.floor(x * 100)\r\n            y = Math.floor(y * 100)\r\n            tmpMatrice[x][y] = tmpMatrice[x][y] + 1\r\n        }\r\n \r\n        setTotal(total + N)\r\n        setInside(ins)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        {inside ? <p>simulated PI = {inside/total * 4}</p> : <></>}\r\n        <p>PI = 3.14159265359</p>\r\n        <Button  variant=\"contained\" color = \"primary\" onClick = {() => simulate()}> Simulate </Button>\r\n        <div className = \"matrice\">{matriceElements}</div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default MonteCarloPI\r\n","import './App.css';\nimport MonteCarloPI from './monteCarloPi';\n\nfunction App() {\n  return (\n    <>\n    <MonteCarloPI></MonteCarloPI>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}